namespace lipm_walking {

/** \page build Building from source

In what follows, we assume we are starting from a fresh and up-to-date Ubuntu 16.04 system:

\code
ayumi:~$ sudo apt-get update
ayumi:~$ sudo apt-get -y upgrade
ayumi:~$ sudo apt-get -y install cmake cython doxygen g++ git gfortran libboost1.58-all-dev libeigen3-dev libgeos++-dev libnanomsg-dev libtinyxml2-dev python-coverage python-nose python-numpy python-pip python-setuptools
\endcode

\section jrl JRL dependencies

Suppose our username is ``ayumi`` and we keep source software repositories in ``~/Software``. We install dependencies from [jrl-umi3218](https://github.com/jrl-umi3218/) repositories following the standard CMake pipeline, starting with Eigen3ToPython:

\code
ayumi:~/Software$ git clone --recursive https://github.com/jrl-umi3218/Eigen3ToPython
ayumi:~/Software/Eigen3ToPython/build$ cmake .. -DCMAKE_BUILD_TYPE=Release
ayumi:~/Software/Eigen3ToPython/build$ make -j4
ayumi:~/Software/Eigen3ToPython/build$ sudo make install
\endcode

Apply this process to all dependencies in the following order:

- [Eigen3ToPython](https://github.com/jrl-umi3218/Eigen3ToPython/tree/dcc442987c3d488fd60ce7e7bcabfdf7feb847f6): Python bindings for Eigen
- [SpaceVecAlg](https://github.com/jrl-umi3218/SpaceVecAlg/tree/4fff3d8a45499e495498da49d24c554be22a2c47): spatial vector algebra
- [RBDyn](https://github.com/jrl-umi3218/RBDyn/commit/bf5dc94fbb52fe311fd17ba67da84ba07c82c2b7): rigid body dynamics
- [eigen-qld](https://github.com/jrl-umi3218/eigen-qld/commit/434e9f684c18b5b5827b29b3a70aabacc5eb192f): quadratic programming
- [eigen-quadprog](https://github.com/jrl-umi3218/eigen-quadprog/commit/cb2d5a0e2f640d3c75a62c50e1cdab15b92342d6): quadratic programming
- [sch-core](https://github.com/jrl-umi3218/sch-core/commit/12959e0afc28d038f750918e33d4669612c4c2dc): collision detection
- [sch-core-python](https://github.com/jrl-umi3218/sch-core-python/commit/2890b2ccd89fdcae31fc75c7efd54f39f8239a48): Python bindings for collision detection
- [Tasks](https://github.com/jrl-umi3218/Tasks/commit/33f6b298aa3aa3f3cb24d62df4b959d1e4eede93): inverse kinematics
- [mc_rbdyn_urdf](https://github.com/jrl-umi3218/mc_rbdyn_urdf/commit/a85621d468aa2631640fcc226ea78df3c5c16c90): robot model loader
- [copra](https://github.com/vsamy/copra/commit/97509e74504e604305be916691c4d6217e2b7755): linear model predictive control

\note These links and other links below point to the commits used at the time of writing these instructions. If anything breaks in the process, you always have the option to clone these specific commits rather than the latest ``master``.

\section ros ROS dependencies

The walking controller depends on ROS for its GUI. Make sure you install ROS Kinetic following the [official instructions](https://wiki.ros.org/kinetic/Installation/Ubuntu), that is:

\code
ayumi:~$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu xenial main" > /etc/apt/sources.list.d/ros-latest.list'
ayumi:~$ sudo apt-key adv --keyserver 'hkp://keyserver.ubuntu.com:80' --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654
ayumi:~$ sudo apt-get update
ayumi:~$ sudo apt-get install -y ros-kinetic-desktop ros-kinetic-eigenpy
ayumi:~$ sudo rosdep init
ayumi:~$ rosdep update
ayumi:~$ echo "source /opt/ros/kinetic/setup.bash" >> ~/.bashrc
ayumi:~$ source ~/.bashrc
\endcode

Now you can install one last dependency with the same CMake pipeline as above:

- [hpp-spline](https://github.com/humanoid-path-planner/hpp-spline/commit/9f80a57a7abe14cbf23b9da57df6e5945f703804): spline interpolation

Create your catkin workspace:

\code
ayumi:~$ mkdir -p ~/Software/catkin_ws/src
ayumi:~/Software/catkin_ws/$ catkin_make
\endcode

There are two ROS projects for mc_rtc:

- [mc_rtc_ros](https://gite.lirmm.fr/multi-contact/mc_rtc_ros/tree/6d5b6f1bb89c446f200794d94dd3b510d456d1b8): ROS tools for mc_rtc
- [mc_rtc_ros_data](https://gite.lirmm.fr/multi-contact/mc_rtc_ros_data/tree/c3674db95d1658f2054739dc0c99eae9cfca494d): ROS models for mc_rtc

The installation is a bit broken here: you will need to link the second one and build once before linking the first one.

\code
ayumi:~/Software/catkin_ws/src/$ ln -s ~/Software/mc_rtc_ros_data
ayumi:~/Software/catkin_ws/$ catkin_make -DCMAKE_BUILD_TYPE=Release
ayumi:~/Software/catkin_ws/$ catkin_make install
ayumi:~/Software/catkin_ws/src/$ ln -s ~/Software/mc_rtc_ros
\endcode

From this state, we are ready to build mc_rtc. Make sure you source catkin development files in your bash or zsh configuration as well:

\code
ayumi:~$ echo "source ~/Software/catkin_ws/devel/setup.bash" >> ~/.bashrc
\endcode

\section rtc Building mc_rtc

Once ROS data packages have been built, apply the CMake pipeline to our last dependency:

- [mc_rtc](https://gite.lirmm.fr/multi-contact/mc_rtc/tree/e5529d0c4812bd15f33c7557f6ccea61ba0008a1): robot control framework

\code
ayumi:~/Software$ git clone --recursive git@gite.lirmm.fr:multi-contact/mc_rtc.git
ayumi:~/Software/mc_rtc/build$ cmake .. -DCMAKE_BUILD_TYPE=Release
ayumi:~/Software/mc_rtc/build$ make -j4
ayumi:~/Software/mc_rtc/build$ sudo make install
\endcode

Finally, let us update our ``LD_LIBRARY_PATH`` so that we can link against our future controllers:

\code
ayumi:~$ echo "export LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:/usr/local/lib" >> ~/.bashrc
ayumi:~$ echo "export LD_LIBRARY_PATH=\${LD_LIBRARY_PATH}:/usr/local/lib/mc_controller" >> ~/.bashrc
\endcode

\section controller Building the controller

Now that all dependencies are installed, we can finally install the lipm_walking_controller:

\code
ayumi:~/Software$ git clone --recursive https://github.com/jrl-umi3218/lipm_walking_controller/
ayumi:~/Software$ cd lipm_walking_controller
ayumi:~/Software$ mkdir build && cd build
ayumi:~/Software$ cmake -DCMAKE_BUILD_TYPE=Release ..
ayumi:~/Software$ make 
ayumi:~/Software$ sudo make install 
\endcode

To avoid installing with root privileges (sudo) you can change ownership or permissions of the ``/usr/local/lib/mc_controller`` folder:

\code
ayumi:~$ sudo chown -R ayumi:ayumi /usr/local/lib/mc_controller
\endcode

\section choreonoid_build Building Choreonoid

You can test the controller in simulation using Choreonoid and the AIST dynamics simulator. First, install the following packages:

\code
ayumi:~$ sudo apt-get install -y f2c gettext liblapack-dev libomniorb4-dev libyaml-dev omniidl omniidl-python software-properties-common
\endcode

Install OpenRTM-aist 1.1.2 packages (manually distributed...):

\code
ayumi:~/Software$ wget https://github.com/OpenRTM/OpenRTM-aist/releases/download/svn/RELEASE_1_1_2/OpenRTM-aist_1.1.2_ubuntu16.04_amd64_package.tar.gz
ayumi:~/Software$ tar zxvf OpenRTM-aist_1.1.2_ubuntu16.04_amd64_package.tar.gz
ayumi:~/Software/OpenRTM-aist_1.1.2_ubuntu16.04_amd64_package/$ sudo dpkg -i openrtm-aist_1.1.2-0_amd64.deb
ayumi:~/Software/OpenRTM-aist_1.1.2_ubuntu16.04_amd64_package/$ sudo dpkg -i openrtm-aist-dev_1.1.2-0_amd64.deb
ayumi:~/Software/OpenRTM-aist_1.1.2_ubuntu16.04_amd64_package/$ sudo dpkg -i openrtm-aist-example_1.1.2-0_amd64.deb
ayumi:~/Software$ rm -rf OpenRTM-aist_1.1.2_ubuntu16.04_amd64_package*
\endcode

\code
ayumi:~/Software$ wget https://github.com/OpenRTM/OpenRTM-aist-Python/releases/download/svn%252FRELEASE_1_1_2/OpenRTM-aist-Python_1.1.2_ubuntu16.04_amd64_package.tar.gz
ayumi:~/Software$ tar zxvf OpenRTM-aist-Python_1.1.2_ubuntu16.04_amd64_package.tar.gz
ayumi:~/Software/OpenRTM-aist-Python_1.1.2_ubuntu16.04_amd64_package$ sudo dpkg -i openrtm-aist-python_1.1.2-1_amd64.deb
ayumi:~/Software/OpenRTM-aist-Python_1.1.2_ubuntu16.04_amd64_package$ sudo dpkg -i openrtm-aist-python-example_1.1.2-1_amd64.deb
ayumi:~/Software$ rm -rf OpenRTM-aist-Python_1.1.2_ubuntu16.04_amd64_package*
\endcode

Install the [OpenHRP3](https://github.com/fkanehiro/openhrp3/tree/53d561a288866a9ebf23c2bd07631fe4c5b91594) library:

\code
ayumi:~/Software/$ git clone --recursive https://github.com/fkanehiro/openhrp3.git
ayumi:~/Software/openhrp3/util$ ./installPackages.sh packages.list.ubuntu.16.04
ayumi:~/Software/openhrp3/build/$ cmake ..
ayumi:~/Software/openhrp3/build/$ make -j4
ayumi:~/Software/openhrp3/build/$ sudo make install
\endcode

Install the [hrpsys-base](https://github.com/fkanehiro/hrpsys-base/tree/5cbb5490f55c7017f7ff789c3d9de531ba92e1b6) suite of OpenRTM components:

\code
ayumi:~/Software/$ git clone --recursive https://github.com/fkanehiro/hrpsys-base.git
ayumi:~/Software/hrpsys-base/build/$ cmake .. -DBUILD_KALMAN_FILTER=ON -DBUILD_STABILIZER=OFF
ayumi:~/Software/hrpsys-base/build/$ make -j4
ayumi:~/Software/hrpsys-base/build/$ sudo make install
\endcode

Install [Choreonoid](https://github.com/s-nakaoka/choreonoid/tree/82148c9eb86310717fc90392aee9c0b63e77dd5a):

\code
ayumi:~/Software/$ git clone --branch release-1.7 https://github.com/s-nakaoka/choreonoid.git
ayumi:~/Software/choreonoid/misc/script$ ./install-requisites-ubuntu-16.04.sh
ayumi:~/Software/choreonoid/build/$ cmake .. -DENABLE_CORBA=ON -DBUILD_CORBA_PLUGIN=ON -DBUILD_OPENHRP_PLUGIN=ON -DBUILD_OPENRTM_PLUGIN=ON -DUSE_BUILTIN_CAMERA_IMAGE_IDL=ON -DUSE_PYBIND11=OFF -DUSE_PYTHON3=OFF
ayumi:~/Software/choreonoid/build/$ make -j4
ayumi:~/Software/choreonoid/build/$ sudo make install
\endcode

\section jvrc Simulation with the JVRC-1 model

We will need an interface to communicate with our simulated robots. Install one of the following:

- [mc_openrtm](https://gite.lirmm.fr/multi-contact/mc_openrtm/tree/9b93983a08bbddbb186db1a0aac03105066b34e8): OpenRTM interface to connect mc_rtc with the Choreonoid simulation
- [mc_udp](https://gite.lirmm.fr/multi-contact/mc_udp/tree/0cefb1ab0743718eaab2251d2008b0fb119eb143): optional, install if your robot has a UDP interface (for instance HRP-4)

Then, install the Choreonoid project files from the following repository using the standard CMake pipeline:

- [jvrc_choreonoid](https://gite.lirmm.fr/multi-contact/jvrc_choreonoid/tree/aaa0998db6e9a8b23ef3f04238948ee54ee00fec): JVRC-1 robot model and project files

Go to ``~/.config/Choreonoid/Choreonoid.conf`` and complete your path variables as follows:

\code
pathVariables:
  MODEL:
    - "/usr/local/share/OpenHRP-3.1/sample/model"
    - "/usr/local/share/OpenHRP-3.1/robot"
\endcode

Make sure your omniORB naming service is started by running the ``reset-omninames.sh`` script from your Choreonoid build folder. This script may be useful more than once so we might as well install it:

\code
ayumi:~/Software/choreonoid/build/bin$ sudo cp reset-omninames.sh /usr/local/bin/reset-omninames
ayumi:~/Software/choreonoid/build/bin$ reset-omninames
 * Stopping omniORB name server omniNames                                               [ OK ]
 * Starting omniORB name server omniNames                                               [ OK ]
\endcode

You should now be able to run the simulation by (note that you need to be in that specific folder for the Choreonoid simulation to start successfully):

\code
ayumi:/usr/local/share/hrpsys/samples/JVRC1$ choreonoid --start-simulation sim_mc.cnoid
\endcode

\section config Configuring and running the controller

Write the following in your ``~/.config/mc_rtc/mc_rtc.conf`` configuration:

\code
{
  "Enabled": ["LIPMWalking"],
  "MainRobot": "JVRC1"
}
\endcode

Almost there! We can finally:

- Start the RViz GUI:
    \code
    ayumi:~$ roslaunch lipm_walking_controller display.launch
    \endcode
- Start the Choreonoid simulation:
    \code
    ayumi:~/Software/choreonoid/build/bin$ sudo reset-omninames
    ayumi:/usr/local/share/hrpsys/samples/JVRC1$ choreonoid --start-simulation sim_mc.cnoid
    \endcode

If everything worked well (as in the Docker) you should get something like this:

<img src="https://user-images.githubusercontent.com/1189580/69481155-04de3500-0e52-11ea-91cc-02d05d504ffa.png" style="max-height: 42em" align="left">
<div style="clear: both"></div>

*/

}
